@page "/comment_create/{postId:int}"
@inject HttpClient Http
@inject TokenService Token
@inject NavigationManager NavigationManager
<style>
    .button {
    font-size: 30px;
    background: white;
    color: blue;
    border: none;
    border-radius: 5px
    }

</style>



<p>Jätä kommentti</p>

<div class="row">
    <div class="col">
        <form>
            <input @bind="kommentti">
            <a type="button" class="button" @onclick="NewComment"> &#10004; </a>
        </form>
    </div>
</div>
<p>@announcer</p>

@code {

    [Parameter]
    public int PostId { get; set; }

    [Parameter]
    public EventCallback OnCommentCreated { get; set; }

    private const string CommentsUri = ApiCallerUri.Comment;

    private string? kommentti;
    private string? announcer;
        
    protected override async Task OnInitializedAsync()
    {

    }

    private async Task NewComment()
    {
        try
        {
            var CommentData = new
            {
                post = PostId,
                comment_content = kommentti
            };

            var json = JsonSerializer.Serialize(CommentData);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            // Luo uusi HttpRequestMessage, jotta voimme lisätä Authorization-otsikon
            var requestMessage = new HttpRequestMessage(HttpMethod.Post, CommentsUri)
                {
                    Content = content
                };

            // Lisää Authorization-otsikko käyttäen TokenService-luokkaa
            var accessToken = Token.GetAccessToken(); // Oletus: Token on `TokenService`-instanssi
            if (!string.IsNullOrEmpty(accessToken))
            {
                requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            }
            else
            {
                announcer = "Kommentin lähetys epäonnistui: Access token puuttuu.";
                return;
            }

            // Suorita pyyntö
            var response = await Http.SendAsync(requestMessage);

            if (response.IsSuccessStatusCode)
            {
                announcer = "Kommentti lähetetty onnistuneesti!";
                kommentti = ""; // Tyhjennetään kenttä onnistuneen lähetyksen jälkeen
                await OnCommentCreated.InvokeAsync();
            }
            else
            {
                announcer = "Kommentin lähetys epäonnistui. Tarkista API.";
            }
        }
        catch (Exception ex)
        {
            announcer = $"Virhe: {ex.Message}";
        }
    }

}
