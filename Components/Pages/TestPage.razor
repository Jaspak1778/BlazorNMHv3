@page "/test"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject User User

<div class="container-fluid boxelement">
    <h1>Kirjaudu</h1>
    <br />
    <form>
        <div class="input-container">
            <label for="user">Käyttäjänimi</label>
            <input />
        </div>
        <div class="input-container">
            <label for="pass">Salasanasi</label>
            <textarea />
        </div>
        <div class="flex-lg-wrap">
            <p></p>
            <button>
                Kirjaudu
            </button>
        </div>
    </form>
    <br />
    <div id="pass">
        <a style="color:dodgerblue; width:auto" class="btn btn-link" href="signup">Uusi käyttäjä? Luo tunnukset</a>
    </div>
</div>
@code {

    private string? username;
    private string? password;
    private string? announcer;
    private bool showFail = false;
    private string LoginUri = ApiCallerUri.Login;
    private string UsersUri = ApiCallerUri.Users;

    private async Task Logins()
    {

        var loginData = new

        {
            username = username,
            password = password
        };

        var json = JsonSerializer.Serialize(loginData);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        // Yllä on logindata joka on muutettu JSON muotoon ja joka lisätään bodyyn

        var response = await HttpClient.PostAsync(LoginUri, content);
        if (response.IsSuccessStatusCode)

        {
            var message = response.Content;
            var responseContent = await response.Content.ReadAsStringAsync();
            var user = JsonSerializer.Deserialize<User>(responseContent);
            if (user != null)

            {

                announcer = "Kirjauduttu sisään..";

            }
            else

            {
                showFail = true;
                announcer = "Kirjautuminen epäonnistui: Käyttäjä ei löytynyt.";
            }

        }
        else
        {
            showFail = true;
            announcer = "Väärä tunnus tai salasana, tarkista!";
            Console.WriteLine("Kirjautuminen epäonnistui.");
        }
    }
    private async Task FetchUserDetails()
    {

        var userResponse = await HttpClient.GetAsync(UsersUri);

        if (userResponse.IsSuccessStatusCode)
        {
            var userContent = await userResponse.Content.ReadAsStringAsync();
            var userDetailsList = JsonSerializer.Deserialize<List<User>>(userContent);
            var userDetails = userDetailsList?.FirstOrDefault();
            if (userDetails != null)

            {
                User.username = userDetails.username; // Aseta käyttäjänimi
                User.id = userDetails.id;         // Aseta käyttäjän ID
                User.IsLoggedIn = true;                // Aseta kirjautumistila

                Console.WriteLine($"Kirjautunut käyttäjä: {userDetails.username}, Etunimi: {userDetails.first_name}, Sukunimi: {userDetails.last_name}");
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Console.WriteLine("Käyttäjän tietojen hakeminen epäonnistui: Käyttäjä ei löytynyt.");
            }
        }
        else
        {
            Console.WriteLine("Käyttäjän tietojen hakeminen epäonnistui.");
            NavigationManager.NavigateTo("/");
        }

    }

}