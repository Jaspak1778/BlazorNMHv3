@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject User User
@inject TokenService Token
@inject IHttpClientFactory HttpClientFactory

<div class="login-container">
    <h1>Kirjaudu</h1>
    <form @onsubmit="Logins" class="login-form">
        <div class="input-container">
            <InputText id="user" class="form-input" @bind-Value="username" @onmouseover="() => showFail = false" placeholder="Käyttäjä" required />
        </div>
        <div class="input-container">
            <InputText id="pass" type="password" class="form-input" @bind-Value="password" placeholder="Salasana" required />
        </div>
        <button type="submit" class="custom-button">Kirjaudu</button>
    </form>
    <a href="signup" class="signup-link">Uusi käyttäjä? Luo tunnukset</a>
</div>

@if (showFail)
{
    <div class="error-message">@announcer</div>
}

@code {
    private string? username;
    private string? password;
    private string? announcer;
    private bool showFail = false;

    private const string LoginUri = ApiCallerUri.Login;
    private const string ProfileUri = ApiCallerUri.Profile;

    private async Task Logins()
    {
        try
        {
            var loginData = new { username = username, password = password };
            var json = JsonSerializer.Serialize(loginData);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await Http.PostAsync(LoginUri, content);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var tokenResponse = JsonSerializer.Deserialize<TokenResponse>(responseContent);

                if (tokenResponse != null && !string.IsNullOrEmpty(tokenResponse.Access) && !string.IsNullOrEmpty(tokenResponse.Refresh))
                {
                    // Save both access and refresh tokens using TokenService
                    Token.SaveTokens(tokenResponse.Access, tokenResponse.Refresh);  // Save both tokens

                    announcer = "Kirjauduttu sisään!";
                    User.ShowAlert = true;

                    // Fetch user details with the access token
                    await FetchUserDetails(tokenResponse.Access);  // Pass the access token here
                }
                else
                {
                    showFail = true;
                    announcer = "Kirjautuminen epäonnistui: Token puuttuu.";
                }
            }
            else
            {
                // Invalid login
                var errorContent = await response.Content.ReadAsStringAsync();
                showFail = true;
                announcer = $"Virheellinen kirjautuminen: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            showFail = true;
            announcer = "Virhe kirjautumisessa: " + ex.Message;
        }
    }

    private async Task FetchUserDetails(string accessToken)
    {
        try
        {
            // Ensure the namespace for AuthenticationHeaderValue is imported
            var requestMessage = new HttpRequestMessage(HttpMethod.Get, ProfileUri)
                {
                    Headers =
                {
                    // Include the Authorization header with the Bearer token
                    Authorization = new AuthenticationHeaderValue("Bearer", accessToken)
                }
                };

            var userResponse = await Http.SendAsync(requestMessage);

            if (userResponse.IsSuccessStatusCode)
            {
                var userContent = await userResponse.Content.ReadAsStringAsync();
                var userDetails = JsonSerializer.Deserialize<User>(userContent);

                if (userDetails != null)
                {
                    User.username = userDetails.username;
                    User.id = userDetails.id;
                    User.IsLoggedIn = true;

                    // Navigate to the feed page
                    Navigation.NavigateTo("/feed");
                }
                else
                {
                    showFail = true;
                    announcer = "Käyttäjän tietojen hakeminen epäonnistui.";
                }
            }
            else
            {
                var errorContent = await userResponse.Content.ReadAsStringAsync();
                showFail = true;
                announcer = $"Käyttäjän tietojen hakeminen epäonnistui: {errorContent}";
            }
        }
        catch (HttpRequestException httpEx)
        {
            showFail = true;
            announcer = "Verkko-ongelma: " + httpEx.Message;
        }
        catch (Exception ex)
        {
            showFail = true;
            announcer = "Virhe käyttäjätietojen hakemisessa: " + ex.Message;
        }
    }
}


