@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject User User
@inject TokenService Token



<div class="login-container">
    <h1>Kirjaudu</h1>
    <form @onsubmit="Logins" class="login-form">

        <div class="input-container">
            <InputText id="user" class="form-input" @bind-Value="username" required />
            <label for="user" class="form-label">Käyttäjänimi</label>
        </div>
        <div class="input-container">
            <InputText id="pass" type="password" class="form-input" @bind-Value="password" required />
            <label for="pass" class="form-label">Salasanasi</label>
        </div>
        <button type="submit" class="custom-button">Kirjaudu</button>
    </form>
    <a href="signup" class="signup-link">Uusi käyttäjä? Luo tunnukset</a>
</div>

@if (showFail)
{
    <div class="error-message">@announcer</div>
}



@code {

    private string? username;
    private string? password;
    private string? announcer;
    private bool showFail = false;

    private const string LoginUri = ApiCallerUri.Login;
    private const string UsersUri = ApiCallerUri.Users;

    private async Task Logins()
    {

        var loginData = new

        {
            username = username,
            password = password
        };

        var json = JsonSerializer.Serialize(loginData);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        // Yllä on logindata joka on muutettu JSON muotoon ja joka lisätään bodyyn

        var response = await Http.PostAsync(LoginUri, content);
        if (response.IsSuccessStatusCode)

        {
            var message = response.Content;
            var responseContent = await response.Content.ReadAsStringAsync();
            var user = JsonSerializer.Deserialize<User>(responseContent);
            if (user != null)

            {
                announcer = "Kirjauduttu sisään..";
                User.ShowAlert = true;
                await FetchUserDetails();

            }
            else

            {
                showFail = true;
                announcer = "Kirjautuminen epäonnistui: Käyttäjä ei löytynyt.";
            }

        }
        else
        {
            showFail = true;
            announcer = "Väärä tunnus tai salasana, tarkista!";
            Console.WriteLine("Kirjautuminen epäonnistui.");
        }
    }
    private async Task FetchUserDetails()
    {

        var userResponse = await Http.GetAsync("https://djangorestapiv3.azurewebsites.net/api/users/");

        if (userResponse.IsSuccessStatusCode)
        {
            var userContent = await userResponse.Content.ReadAsStringAsync();
            var userDetailsList = JsonSerializer.Deserialize<List<User>>(userContent);
            var userDetails = userDetailsList?.FirstOrDefault();
            if (userDetails != null)

            {
                User.username = userDetails.username; // Aseta käyttäjänimi
                User.id = userDetails.id;         // Aseta käyttäjän ID
                User.IsLoggedIn = true;                // Aseta kirjautumistila

                Console.WriteLine($"Kirjautunut käyttäjä: {userDetails.username}, Etunimi: {userDetails.first_name}, Sukunimi: {userDetails.last_name}");
                Navigation.NavigateTo("/feed");
                await GetToken();
            }
            else
            {
                announcer = "Käyttäjän tietojen hakeminen epäonnistui: Käyttäjä ei löytynyt.";
            }
        }
        else
        {
            announcer = "Käyttäjän tietojen hakeminen epäonnistui.";
            Navigation.NavigateTo("/feed");
        }

    }
    private async Task GetToken()
    {
        var csrfToken = await Token.GetCsrfTokenAsync();
        Console.WriteLine("Token");
    }
}